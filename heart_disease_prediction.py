# -*- coding: utf-8 -*-
"""heart disease prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zl2R1bZr6WcOs3myOgZ9d0xcjwAnR9d2
"""

import pandas as pd
df = pd.read_csv('/content/heart.csv')
print(df.head())
print(df.info())
print(df.describe())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler


print(df.isnull().sum())


df.dropna(inplace=True)

X = df.drop('target', axis=1)
y = df['target']


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
print("Logistic Regression Results:")
print(classification_report(y_test, y_pred_lr))

from sklearn.svm import SVC

svm_model = SVC(probability=True)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)
print("SVM Results:")
print(classification_report(y_test, y_pred_svm))

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print("Random Forest Results:")
print(classification_report(y_test, y_pred_rf))

from xgboost import XGBClassifier

xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(X_train, y_train)
y_pred_xgb = xgb_model.predict(X_test)
print("XGBoost Results:")
print(classification_report(y_test, y_pred_xgb))

from sklearn.metrics import confusion_matrix, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns

models = {
    'Logistic Regression': (lr_model, y_pred_lr),
    'SVM': (svm_model, y_pred_svm),
    'Random Forest': (rf_model, y_pred_rf),
    'XGBoost': (xgb_model, y_pred_xgb),
}

for name, (model, y_pred) in models.items():
    cm = confusion_matrix(y_test, y_pred)
    print(f"\n{name} Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"{name} Confusion Matrix")
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()